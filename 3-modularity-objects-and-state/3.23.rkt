#lang racket
(require compatibility/mlist)
(require rackunit)

(define (make-node backward-link item forward-link)
  (define (set-backward-link! x) (set! backward-link x))
  (define (set-forward-link! x) (set! forward-link x))
  (define (dispatch m)
    (cond ((eq? m 'item) item)
          ((eq? m 'backward-link) backward-link)
          ((eq? m 'set-backward-link!) set-backward-link!)
          ((eq? m 'forward-link) forward-link)
          ((eq? m 'set-forward-link!) set-forward-link!)
          (else (error "wtf"))))
  dispatch
  )

(define left-node (make-node null 3 null))
(define right-node (make-node null 3 null))
(define subject (make-node left-node 4 right-node))
(check-equal? (subject 'item) 4)
(check-equal? (subject 'backward-link) left-node)
(check-equal? (subject 'forward-link) right-node)

(define (front-ptr deque) (mcar deque))
(define (rear-ptr deque) (mcdr deque))
(define (set-front-ptr! deque item) (set-mcar! deque item))
(define (set-rear-ptr! deque item) (set-mcdr! deque item))
(define (empty-deque? deque) (null? (front-ptr deque)))
(define (make-deque) (mcons null null))
(define (front-deque deque)
  (if (empty-deque? deque)
    (error "FRONT called with an empty deque" deque)
    ((front-ptr deque) 'item)))

(define (rear-deque deque)
  (if (empty-deque? deque)
    (error "REAR called with an empty deque" deque)
    ((rear-ptr deque) 'item)))

(define (front-insert-deque! deque item)
  (cond ((empty-deque? deque)
         (let ((new-node (make-node null item null)))
           (set-front-ptr! deque new-node)
           (set-rear-ptr! deque new-node)
           deque))
        (else
          (let ((old-front-node (front-ptr deque)))
            (let ((new-node (make-node null item old-front-node)))
          (set-front-ptr! deque new-node)
          ((old-front-node 'set-backward-link!) new-node))
          deque))))

(define (rear-insert-deque! deque item)
  (cond ((empty-deque? deque)
         (let ((new-node (make-node null item null)))
           (set-front-ptr! deque new-node)
           (set-rear-ptr! deque new-node)
           deque))
        (else
          (let ((old-rear-node (rear-ptr deque)))
            (let ((new-node (make-node old-rear-node item null)))
              (set-rear-ptr! deque new-node)
              ((old-rear-node 'set-forward-link!) new-node)
              )
            deque))))

(define (doubly-linked-to-singly-linked-list dll)
  (cond ((null? dll) '())
        (else (cons (dll 'item) (doubly-linked-to-singly-linked-list (dll 'forward-link))))))

(define (to-list deque)
  (doubly-linked-to-singly-linked-list (front-ptr deque)
                                       ))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        (else
          (set-front-ptr! deque ((front-ptr deque) 'forward-link))
          (cond ((null? (front-ptr deque)) deque)
                (else
                  (let ((first-node (front-ptr deque)))
                    (cond ((null? first-node) deque)
                          (else ((first-node 'set-backward-link!) null) deque))))))))

(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        (else
          (set-rear-ptr! deque ((rear-ptr deque) 'backward-link))
          (cond ((null? (rear-ptr deque)) deque)
                (else
                  (let ((last-node (rear-ptr deque)))
                    (cond ((null? last-node) deque)
                          (else ((last-node 'set-forward-link!) null) deque))))))))

(define q1 (make-deque))
(check-equal? (to-list q1) '())
(check-equal? (to-list (front-insert-deque! q1 'a)) '(a))
(check-equal? (to-list (rear-insert-deque! q1 'b)) '(a b))
(check-equal? (to-list (front-insert-deque! q1 'c)) '(c a b))
(check-equal? (to-list (rear-delete-deque! q1)) '(c a))
(check-equal? (to-list (front-delete-deque! q1)) '(a))
(check-equal? (to-list (front-delete-deque! q1)) '())
