#lang racket
(require compatibility/mlist)
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue queue)
      (if (empty-queue?)
        (error "FRONT called with an empty queue" queue)
        (mcar front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (mcons item '())))
        (cond ((empty-queue?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair)
               queue)
              (else
                (set-mcdr! rear-ptr new-pair)
                (set! rear-ptr new-pair)
                queue))))
    (define (delete-queue!)
      (cond ((empty-queue?) (error "DELETE! called with an empty queue"))
            (else (set! front-ptr (mcdr front-ptr)) queue)))
    (define (to-string) front-ptr)
    (define (dispatch m)
      (cond ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            ((eq? m 'to-string) to-string)
            (else error "Unknown message")))
    dispatch))

(define (print-queue queue) (println ((queue 'to-string))))
(define queue (make-queue))
(print-queue ((queue 'insert-queue!) 'a))
(print-queue ((queue 'insert-queue!) 'b))
(print-queue ((queue 'delete-queue!)))
(print-queue ((queue 'delete-queue!)))
