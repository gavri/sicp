#lang racket

(require compatibility/mlist)

(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())

(define (make-frame variables values)
  (mcons variables values))
(define (frame-variables frame) (mcar frame))
(define (frame-values frame) (mcdr frame))
(define (add-binding-to-frame! var val frame)
  (set-mcar! frame (mcons var (mcar frame)))
  (set-mcdr! frame (mcons val (mcdr frame))))

(define (extend-environment vars vals base-env)
  (if (= (mlength vars) (mlength vals))
    (cons (make-frame vars vals) base-env)
    (if (< (length vars) (length vals))
      (error "Too many arguments supplied" vars vals)
      (error "Too few arguments supplied" vars vals))))


(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (mcar vars))
             (mcar vals))
            (else (scan (mcdr vars) (mcdr vals)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (mcar vars))
             (set-mcar! vals val))
            (else (scan (mcdr vars) (mcdr vals)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable -- SET!" var)
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars)
             (add-binding-to-frame! var val frame))
            ((eq? var (mcar vars))
             (set-mcar! vals val))
            (else (scan (mcdr vars) (mcdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))

(require rackunit)

(define first (extend-environment (mlist 'a 'b 'c) (mlist 1 2 3) the-empty-environment))
(define second (extend-environment (mlist 'd) (mlist 4) first))

(check-equal? (lookup-variable-value 'b first) 2)
(check-equal? (lookup-variable-value 'd second) 4)
(check-exn exn:fail? (lambda () (lookup-variable-value 'd first)))
(check-not-exn (lambda () (lookup-variable-value 'd second)))

(define third (extend-environment (mlist 'a 'b) (mlist 1 2) the-empty-environment))
(set-variable-value! 'b 3 third)
(check-equal? (lookup-variable-value 'b third) 3)
(check-exn exn:fail? (lambda () (set-variable-value! 'c 4 third)))

(define fourth (extend-environment (mlist 'a 'b) (mlist 1 2) the-empty-environment))
(check-equal? (lookup-variable-value 'b fourth) 2)
(define-variable! 'b 3 fourth)
(check-equal? (lookup-variable-value 'b fourth) 3)
(check-not-exn (lambda () (define-variable! 'c 4 fourth)))
(check-equal? (lookup-variable-value 'c fourth) 4)
(check-not-exn (lambda () (define-variable! 'c 5 fourth)))
(check-equal? (lookup-variable-value 'c fourth) 5)

