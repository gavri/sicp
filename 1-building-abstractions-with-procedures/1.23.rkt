#lang racket
(define (square n) (* n n))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (timed-prime-test n)
  (start-prime-test n (current-inexact-milliseconds)))
(define (start-prime-test n start-time)
  (cond [(prime? n) (report-prime n (- (current-inexact-milliseconds) start-time))]))
(define (report-prime n elapsed-time)
  (newline)
  (display n)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes from to)
  (cond 
    [(odd? from) (timed-prime-test from)]
    )
  (cond
    [(<= from to) (search-for-primes (+ from 1) to)]
    )
  )
(define (next n)
  (cond [(= n 2) 3] [else (+ n 2)]))

(search-for-primes 1000 1020)
(newline)
(display "===")
(newline)
(search-for-primes 10000 10050)
(newline)
(display "===")
(newline)
(search-for-primes 100000 100200)
(newline)
(display "===")
(newline)
(search-for-primes 1000000 1000200)
